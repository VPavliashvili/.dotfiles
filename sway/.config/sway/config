# Default config for sway
#
# Copy this to ~/.config/sway/config and edit it to your liking.
#
# Read `man 5 sway` for a complete reference.

### Variables
#
# Logo key. Use Mod1 for Alt.
set $mod Mod4
# Home row direction keys, like vim
set $left h
set $down j
set $up k
set $right l
# Your preferred terminal emulator
set $term foot
set $menu fuzzel -b 282c34ff -t 61afefff -s 98c379ff -m c678ddff -S 000000ff -f SourceCodePro:size=12 -i Arc -w 30 -l 15
set $clipboard fuzzel -b 282c34ff -t 61afefff -s 98c379ff -m c678ddff -S 000000ff -f SourceCodePro:size=12 -i -w 50 -l 25

### execs
exec wl-paste --type text --watch cliphist store #Stores only text data
exec wl-paste --type image --watch cliphist store #Stores only image data
exec swaybg -o DP-1 -i ~/Pictures/wallpapers/onedark/cyberpunk-sword.png
exec swaybg -o DP-2 -i ~/Pictures/wallpapers/vertical/berserk.jpg
exec /usr/lib/polkit-kde-authentication-agent-1
exec nm-applet
exec blueman-applet
exec swaykbdd
exec ~/bin/waybar_ipc

# Set gaps around borders
gaps inner 2
gaps outer 2
smart_gaps on

# Remove title bars
default_border pixel 4
smart_borders on

workspace_auto_back_and_forth yes

### Output configuration
output DP-1 resolution 2560x1440 position 0,525 scale 1.25
output DP-2 resolution 1920x1080 position 2048,0 transform 90
#
# You can get the names of your outputs by running: swaymsg -t get_outputs

### Window rules
for_window [app_id="yad"] floating enable

### Idle configuration
#
# Example configuration:
#
# exec swayidle -w \
#          timeout 300 'swaylock -f -c 000000' \
#          timeout 600 'swaymsg "output * power off"' resume 'swaymsg "output * power on"' \
#          before-sleep 'swaylock -f -c 000000'
#
# This will lock your screen after 300 seconds of inactivity, then turn off
# your displays after another 300 seconds, and turn your screens back on when
# resumed. It will also lock your screen before your computer goes to sleep.

### Input configuration
#
input type:keyboard {
    xkb_layout us,ge
    xkb_options grp:alt_shift_toggle
}

input type:pointer {
    accel_profile "flat"
    pointer_accel -0.25
}
#
# You can get the names of your inputs by running: swaymsg -t get_inputs
# Read `man 5 sway-input` for more information about this section.

bindsym --to-code {
### Key bindings
    $mod+v exec cliphist list | $clipboard --dmenu | cliphist decode | wl-copy
    $mod+SHIFT+x exec swaylock --indicator --clock  -e -F -S -k --effect-scale 0.3 -r --effect-vignette 0.2:7
    # Print exec grim -g "$(slurp)" - | swappy -f -
    Print exec ~/.config/sway/swappy.sh

# audio and mic
    XF86AudioRaiseVolume exec wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%+
    XF86AudioLowerVolume exec wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%-
    XF86AudioMute exec pactl set-sink-mute @DEFAULT_SINK@ toggle
    XF86AudioMicMute exec pactl set-source-mute @DEFAULT_SOURCE@ toggle
    $mod+SHIFT+M exec ~/.config/waybar/scripts/audio/change_state.py

# media control
    XF86AudioPlay exec playerctl play-pause
    XF86AudioNext exec playerctl next
    XF86AudioPrev exec playerctl previous
    XF86audiostop exec playerctl stop
}


#
# Basics:
#

# Drag floating windows by holding down $mod and left mouse button.
# Resize them with right mouse button + $mod.
# Despite the name, also works for non-floating windows.
# Change normal to inverse to use left mouse button for resizing and right
# mouse button for dragging.
floating_modifier $mod normal

bindsym --to-code {
    # Start a terminal
    $mod+Return exec $term
    # Kill focused window
    $mod+q kill
    # Start your launcher
    $mod+d exec $menu
    # Reload the configuration file
    $mod+Shift+r reload
    # Exit sway (logs you out of your Wayland session)
    $mod+Shift+e exec swaynag -t warning -m 'You pressed the exit shortcut. Do you really want to exit sway? This will end your Wayland session.' -B 'Yes, exit sway' 'swaymsg exit'
}
#
# Moving around:
#
bindsym --to-code {
    # Move your focus around
    $mod+$left focus left
    $mod+$down focus down
    $mod+$up focus up
    $mod+$right focus right

    # Move the focused window with the same, but add Shift
    $mod+Shift+$left move left
    $mod+Shift+$down move down
    $mod+Shift+$up move up
    $mod+Shift+$right move right
}
#
# Workspaces:

bindsym --to-code {
    # Switch to workspace
    $mod+1 workspace number 1
    $mod+2 workspace number 2
    $mod+3 workspace number 3
    $mod+4 workspace number 4
    $mod+5 workspace number 5
    $mod+6 workspace number 6
    $mod+7 workspace number 7
    $mod+8 workspace number 8
    $mod+9 workspace number 9
    $mod+0 workspace number 10
    # Move focused container to workspace
    $mod+Shift+1 move container to workspace number 1
    $mod+Shift+2 move container to workspace number 2
    $mod+Shift+3 move container to workspace number 3
    $mod+Shift+4 move container to workspace number 4
    $mod+Shift+5 move container to workspace number 5
    $mod+Shift+6 move container to workspace number 6
    $mod+Shift+7 move container to workspace number 7
    $mod+Shift+8 move container to workspace number 8
    $mod+Shift+9 move container to workspace number 9
    $mod+Shift+0 move container to workspace number 10
}

    # Bind workspace to monitors
    workspace 1 output DP-1
    workspace 2 output DP-1
    workspace 3 output DP-1
    workspace 4 output DP-1
    workspace 5 output DP-1
    workspace 6 output DP-1
    workspace 7 output DP-2
    workspace 8 output DP-1
    workspace 9 output DP-1
    workspace 10 output DP-2
#
# Layout stuff:
#
bindsym --to-code {
    # You can "split" the current object of your focus with
    # $mod+b or $mod+v, for horizontal and vertical splits
    # respectively.
    $mod+b splith
    # $mod+v splitv

    # Switch the current container between different layout styles
    $mod+s layout stacking
    $mod+w layout tabbed
    $mod+e layout toggle split

    # Make the current focus fullscreen
    $mod+Shift+f fullscreen

    # Toggle the current focus between tiling and floating mode
    $mod+Shift+Tab floating toggle

    # Swap focus between the tiling area and the floating area
    $mod+Tab focus mode_toggle

    # Move focus to the parent container
    # $mod+a focus parent
#
# Scratchpad:
#
    # Sway has a "scratchpad", which is a bag of holding for windows.
    # You can send windows there and get them back later.

    # Move the currently focused window to the scratchpad
    $mod+Shift+i move scratchpad

    # Show the next scratchpad window or hide the focused scratchpad window.
    # If there are multiple scratchpad windows, this command cycles through them.
    $mod+i scratchpad show
}
#
# Resizing containers:
#
mode "resize" {
    bindsym --to-code {
        $left resize shrink width 10px
        $down resize grow height 10px
        $up resize shrink height 10px
        $right resize grow width 10px

        # Return to default mode
        Return mode "default"
        Escape mode "default"
    }
}
bindsym --to-code $mod+r mode "resize"

mode "runner: [h]ome_apps, [w]ork, [e]mojis, [c]work, [d]work, [k]illall" {
    bindsym --to-code {
        h exec ~/.config/sway/startup_home.sh, mode "default"
        w exec ~/.config/sway/startup_work.sh, mode "default"
        e exec bemoji -n, mode "default"
        c exec ~/bin/connectwork.sh, mode "default"
        d exec ~/bin/disconnectwork.sh, mode "default"
        k exec ~/.config/sway/killall.sh, mode "default"

        Return mode "default"
        Escape mode "default"
    }
}
bindsym --to-code $mod+p mode "runner: [h]ome_apps, [w]ork, [e]mojis, [c]work, [d]work, [k]illall"

mode "vms: [6]work, [9]gaming" {
    bindsym --to-code {
        6 exec ~/.config/sway/run_vm.sh -n win10_work -w 6 -f -a "-f /dev/shm/win10_work win:showFPS=yes -c 127.0.0.1 -p 5906", mode "default"
        9 exec ~/.config/sway/run_vm.sh -n win10_gaming -w 9 -f -a "-f /dev/shm/win10_gaming audio:micDefault=allow win:showFPS=yes -c 127.0.0.1 -p 5905", mode "default"

        Return mode "default"
        Escape mode "default"
    }
}
bindsym --to-code $mod+shift+v mode "vms: [6]work, [9]gaming"


#
# Status Bar:
#
# Read `man 5 sway-bar` for more information about this section.
bar {
    # .config/ is relative by default and means ~/.config/
    swaybar_command .config/sway/waybar/launch.sh
}

include /etc/sway/config.d/*
